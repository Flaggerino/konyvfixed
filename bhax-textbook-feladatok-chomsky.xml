<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           A turinggép olvas egy számot, ami most 10.
           Kivon egyet a decimális számunk utolsó számjegyéből majd eltárolja az egyest.
           Mivel az utolsó helyen nem 0 áll ezért átváltja 0 helyett 9-re.
           Ezek után az első számjegyből is kivn egy egyest és azt is tárolja.
           Addig ismétli ezt a feladatsort, míg minden helyi értékben 0-át nem látunk.
           A tárolt egyesek sorozata lesz a jelen esetben unáris 10-esünk.
            Tutor: Rémiás Dávidot
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
		<programlisting><![CDATA[ 
            1. A, B, C „változók”a, b, c „konstansok”A → aAB, A → aC, CB → bCc, cB → Bc, C → bcS-ből indulunk ki---------------------------A (A → aAB)aAB ( A → aC)aaCB (CB → bCc)aabCc (C → bc)aabbccRévész könyv, 13. o. (Bev. a form. nyelvek elméletébe, Akadémiai Kiadó, 1979)A (A → aAB)aAB ( A → aAB)aaABB ( A → aAB)aaaABBB ( A → aC)aaaaCBBB (CB → bCc)aaaabCcBB (cB → Bc)aaaabCBcB (cB → Bc)aaaabCBBc (CB → bCc)aaaabbCcBc (cB → Bc)aaaabbCBcc (CB → bCc)aaaabbbCccc (C → bc)aaaabbbbcccc
            2. S, X, Y „változók”a, b, c „konstansok”S → abc, S → aXbc, Xb → bX, Xc → Ybcc, bY → Yb, aY -> aaX, aY → aaS-ből indulunk ki---------------------------S (S → aXbc)aXbc (Xb → bX)abXc (Xc → Ybcc)abYbcc (bY → Yb)aYbbcc (aY → aa)aabbccRévész könyv, 12. o. (Bev. a form. nyelvek elméletébe, Akadémiai Kiadó, 1979S (S → aXbc)aXbc (Xb → bX)abXc (Xc → Ybcc)abYbcc (bY → Yb)aYbbcc (aY -> aaX)aaXbbcc (Xb → bX)aabXbcc (Xb → bX)aabbXcc (Xc → Ybcc)aabbYbccc (bY → Yb)aabYbbccc (bY → Yb)aaYbbbccc (aY → aa)aaabbbccc 
       	]]></programlisting>
 	</para>
        <para>
		<programlisting><![CDATA[ 
            P1XP2 → P1QP2, P1, P2 eleme (VN U VT)*, X VN beli, Q (VN U VT)+ beli, kivéve S → üres, de akkor S nem lehet jobb oldali egyetlen szabályban sem
            	]]></programlisting>
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <programlisting><![CDATA[  
#include <stdio.h>

    int main ()
    {
      // Print string to screen.
      printf ("Hello World\n");
return 0;
    }
// C89-C99 es hiba / pipa
 ]]></programlisting>
        </para>
        <para>
                     
Meghatározhatjuk adott műveletek végrehajtási sorrendjét, a nyelv vezérlésátadó utasításainak segítségével.
        </para>
<para>
Az utasításfajtáinkban több típusa is van a C programnyelvben. 
</para>
<para>
Például ezek: 
</para>
<programlisting>
<![CDATA[*kifejezés utasítás
*összetett utasítás
*iterációs utasítás
*vezérlésátadó utasítás
*kiválasztó utasítás
*cimkézett utasítás]]>
</programlisting>
<para>
Kifejezés : 
<programlisting>
<![CDATA[x = 0, i++ vagy printf(...)
x=0;
i++;
printf(...)]]>
</programlisting>
Ha pontosvesszőt írunk utána utasítássá válik, ez zárja le az utasításokat.
A kapcsos zárójelek használatával, az adott deklarációk és utasítások csoportját foglaljuk össze egy összetett blokkba.
Ez szintaktikailag egyenértékű egyetlen utasítással.
</para>
<para>
If-Else: döntések kifejezésére használjuk.
<programlisting>
<![CDATA[if \\(kifejezés)
\\1.utasítás
else
\\2.utasítás]]>
</programlisting>
Az else rész mindig opcionális, nem kötelező. 
Igaz kiértékelés esetén az első megadott utasítást hajtjuk végre, hamis esetén az else fog lefutni. 
Az else, mindig az első,m hozzá legközelebb álló else nélküli ifhez csatlakozik.
Ha nem ezt szeretnénk, a kívánt összerendelés kapcsos zárójelek használatával érhető el.
<programlisting>
<![CDATA[
if (n > 0) {
   if (a > b)
      z = a;
}
else
   z = b;]]>
</programlisting>
Az Else-If utasítás:
<programlisting>
<![CDATA[if \\(kifejezés)
   \\utasítás
else if (kifejezés)
   \\utasítás
else if (kifejezés)
   \\utasítás
else if \\(kifejezés)
   \\utasítás
.
.
else
   \\utasítás]]>
</programlisting>
Ezzel adhatunk meg többszörös döntéseket.
A gép sorra kiértékeli a kifejezéseket és ha bármelyik ezek közül igaz,
A programban folyamatosan kiértékelődésre kerülnek a kifejezések és ha bármelyik igaz ezek közül, a megfelelő utasítás hajtódik végre,
majd befejezi a keresési láncot.

</para>
<para>
A Switch utasítás:
</para>
<para>
A switch utasítással kezteljük a többirányú programágakat. Úgy működik az utasítás, 
hogy összehasonlítja egy kifejezés értékét több egész értékű állandó kifejezés értékével,
hogy az egyik kifejezés értékér összehasonlítja több egész értékű konstans kifejezés értékével,
és ennek megfelelően hajtja végre az utasítást.

        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: 
		<programlisting><![CDATA[ 
%{
#include <stdio.h>
int realnumbers = 0;
%}
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%
int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}
 		]]></programlisting>
        </para>
        <para>
            Deklarálunk egy real_numbers változót, ez megszabja, hogy a számjegyeink 0 és 9 között vehetnek fel értéket.
            Ezek után a lexerünk eldönti ({digit}*(\.{digit}+)? )-t alkalmazva, 
            hogy valós-e az adott szám. Ha valós a szám a real_numbers értéke nő 1-gyel.
            A mainben meghívjuk a lexert és kiíratjuk a valós számok számát.
        </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
/*
Forditas:
$ lex -o l337d1c7.c l337d1c7.l 

Futtatas:
$ gcc l337d1c7.c -o l337d1c7 -lfl
(kilépés az input vége, azaz Ctrl+D)
		<programlisting><![CDATA[
Copyright (C) 2019
Norbert Bátfai, batfai.norbert@inf.unideb.hu

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "@", "/-\\"}},
  {'b', {"b", "8", "|3", "|}"}},
  {'c', {"c", "(", "<", "{"}},
  {'d', {"d", "|)", "|]", "|}"}},
  {'e', {"3", "3", "3", "3"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"g", "6", "[", "[+"}},
  {'h', {"h", "4", "|-|", "[-]"}},
  {'i', {"1", "1", "|", "!"}},
  {'j', {"j", "7", "_|", "_/"}},
  {'k', {"k", "|<", "1<", "|{"}},
  {'l', {"l", "1", "|", "|_"}},
  {'m', {"m", "44", "(V)", "|\\/|"}},
  {'n', {"n", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "0", "()", "[]"}},
  {'p', {"p", "/o", "|D", "|o"}},
  {'q', {"q", "9", "O_", "(,)"}},
  {'r', {"r", "12", "12", "|2"}},
  {'s', {"s", "5", "$", "$"}},
  {'t', {"t", "7", "7", "'|'"}},
  {'u', {"u", "|_|", "(_)", "[_]"}},
  {'v', {"v", "\\/", "\\/", "\\/"}},
  {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"x", "%", ")(", ")("}},
  {'y', {"y", "", "", ""}},
  {'z', {"z", "2", "7_", ">_"}},
  
  {'0', {"D", "0", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%
.	{
	  
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
		]]></programlisting>
        </para>
        <para>
            Egy leet táblázat alapjhán kicserélünk karaktereket leetekre.
            Minden karakterhez 4 leetet fűzünk, ezt tömbökbe osztjuk, azért hogy könnyebben tudjunk hivatkozni ezekre.
            Az r változó eldönti, hogy a karakter 4 lett értéke közül melyik kerüljön kiírásra.
            Generál egy számot 0 és 100 között véletlenszerűen és ezt az értéket veszi fel.
            Az értéktől függően kapjuk a leet[0], leet[1], leet[2] vagy leet[3] értéket.
	    Tutor: Rémiás Dávid

        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 
$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 
$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 
$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            1. Minden x-re létezik nagyobb y amely prím.
            2. Minden x-re létezik nagyobb y amely prím, s a rákövetkezőjének a rákövetkezője is prím.
            3. Létezik y minden x-re ahol ha x prím, akkor kisebb, mint y.
            4. Létezik y minden x-re ahol ha y kisebb, mint x, akkor x nem prím.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
		<programlisting><![CDATA[
int a;
int *b = &a;
int &r =a;
int c[5];
int (&tr) [5] = c;
int *d[5];
int *h ();
int *(*j ());
int (*i(*v (int e))) (int f, int g);

        </para>
        <para>
            int a; = egész
            int *b=&a; = egészre mutató mutató
            int &r=a; =egész referenciája
            int c[5]; = egészek tömbje
            int (&tr)[5] =c; =egészek tömbjének referenciája
            int *d[5]; = egészre mutató mutatók tömbje
            int *h(); = egészre mutató mutatót visszaadó függvény
            int *(*1()); = egészre mutató mutatót visszaadó függvényre mutatót mutató (bár 1-es helyett egy betű használata jobb választás volna)
            int (*v(int c)) (int a, int b); = egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény
            int (*(*z) (int)) (int, int); = függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet
                                            kapó függvényre ( az "int"-ek után hiányzik az elnevezés)
		Tutor: Rémiás Dávid
		]]></programlisting>
        </para>
    </section>                     


</chapter>          
